@import "./variables.scss";

.work-area {
  margin: 0;
}

.columns {
  position: relative;
  clear: both;
  display: flex;
  flex-wrap: wrap;
}

.column-split {
  position: relative;
  clear: both;
  display: flex;
  flex-wrap: wrap;
  flex: 0 0 100%;
  width: 100%;
  max-width: 100%;
}

.column {
  min-height: 1px;
  flex: 0 0 100%;
  width: 100%;
  max-width: 100%;
}

.mosaic {
  position: relative;
  clear: both;
  display: flex;
  flex-wrap: wrap;
}

.mosaic-element {
  float: left;
  width:100%;
}

.width-holder {
  max-width: 1480px;
  min-width: 320px;
  margin: 0 auto;
}

$grids: (
        (total-columns: 12, margin-size: 2, gutter-size: 2, column-size: 4),
        (total-columns: 4, margin-size: 2, gutter-size: 2, column-size: 7),
        (total-columns: 2, margin-size: 2, gutter-size: 2, column-size: 13)
);

@each $grid in $grids {

  //Grid settings
  $grid-total-columns: map_get($grid, 'total-columns');
  $grid-margin-size: map_get($grid, 'margin-size');
  $grid-gutter-size: map_get($grid, 'gutter-size');
  $grid-column-size: map_get($grid, 'column-size');

  //Calculate number of segments
  $grid-row-segments: ($grid-column-size * $grid-total-columns) + ($grid-gutter-size * ($grid-total-columns - 1));
  $grid-total-segments: ($grid-margin-size *2) + $grid-row-segments;

  //Calculate work area margin
  $grid-margin: 100% / $grid-total-segments * $grid-margin-size;
  $grid-segment: 100% / $grid-row-segments;

  @each $breakpoint-name, $breakpoint-width in $grid-breakpoints {
    @media (min-width: map_get($breakpoint-width, 'min')) and (max-width: map_get($breakpoint-width, 'max')) {
      .work-area {
        &.grid-#{$grid-total-columns}-#{$breakpoint-name} {
          margin: 0 $grid-margin;
        }
      }
      .margin-area {
        &.grid-#{$grid-total-columns}-#{$breakpoint-name} {
          margin: 0 $grid-margin;
        }
      }
      .padding-area {
        &.grid-#{$grid-total-columns}-#{$breakpoint-name} {
          padding: 0 $grid-margin;
        }
      }
      @for $i from 1 through $grid-total-columns {
        $column-width: ($grid-segment * $grid-column-size * $i) + ($grid-segment * $grid-gutter-size * ($i - 1));
        .column, .mosaic-element {
          &:first-child {
            margin-left: 0;
          }
          &:last-child {
            margin-right: 0;
          }
          &.grid-#{$grid-total-columns}-#{$breakpoint-name}-#{$i} {
            flex: 0 0 $column-width;
            width: $column-width;
            max-width: $column-width;
            margin-left: $grid-segment;
            margin-right: $grid-segment;

            $total: $grid_total-columns;
            $current: $i;
            $res: $total/$current;

            @if round($res) == $res {
              $child: $total/$current;
              $next_child: $child+1;
              &:nth-child(#{$child}n+#{$child}) {
                margin-right: 0;
              }
              &:nth-child(#{$child}n+#{$next_child}) {
                margin-left: 0;
              }
            }

            &.grid-#{$grid-total-columns}-#{$breakpoint-name}-single{
              margin-left: 0;
              margin-right: 0;
            }
            &.grid-#{$grid-total-columns}-#{$breakpoint-name}-first{
              margin-left: 0;
              margin-right: $grid-segment;
            }
            &.grid-#{$grid-total-columns}-#{$breakpoint-name}-last{
              margin-left: $grid-segment;
              margin-right: 0;
            }

            .column-split {
              > .column, .mosaic-element {
                @for $s from 1 through $i {
                  $split-grid-row-segments: ($grid-column-size * $i) + ($grid-gutter-size * ($i - 1));
                  $split-grid-segment: 100% / $split-grid-row-segments;
                  $split-column-width: ($split-grid-segment * $grid-column-size * $s) + ($split-grid-segment * $grid-gutter-size * ($s - 1));
                  &:first-child {
                    margin-left: 0;
                  }
                  &:last-child {
                    margin-right: 0;
                  }
                  &.grid-#{$grid-total-columns}-#{$breakpoint-name}-#{$s} {

                    $total: $i;
                    $current: $s;
                    $res: $total/$current;

                    @if round($res) == $res {
                      $child: $total/$current;
                      $next_child: $child+1;
                      &:nth-child(#{$child}n+#{$child}) {
                        margin-right: 0;
                      }
                      &:nth-child(#{$child}n+#{$next_child}) {
                        margin-left: 0;
                      }
                    }

                    flex: 0 0 $split-column-width;
                    width: $split-column-width;
                    max-width: $split-column-width;
                    margin-left: $split-grid-segment;
                    margin-right: $split-grid-segment;

                    &.grid-#{$grid-total-columns}-#{$breakpoint-name}-single{
                      margin-left: 0;
                      margin-right: 0;
                    }
                    &.grid-#{$grid-total-columns}-#{$breakpoint-name}-first{
                      margin-left: 0;
                      margin-right: $split-grid-segment;
                    }
                    &.grid-#{$grid-total-columns}-#{$breakpoint-name}-last{
                      margin-left: $split-grid-segment;
                      margin-right: 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

@each $breakpoint-name, $breakpoint-width in $grid-breakpoints {
  @media (min-width: map_get($breakpoint-width, 'min')) and (max-width: map_get($breakpoint-width, 'max')) {
    @for $i from 1 through 100 {
      .width-perc-#{$breakpoint-name}-#{$i} {
        flex: 0 0 1% * $i;
        width: 1% * $i;
        max-width: 1% * $i;
        box-sizing: border-box;
      }
    }

    @for $i from 1 through 10 {
      .width-dec-#{$breakpoint-name}-#{$i} {
        flex: 0 0 10% * $i;
        width: 10% * $i;
        max-width: 10% * $i;
        box-sizing: border-box;
      }
    }

    *.device-#{$breakpoint-name}-hidden {
      display: none !important;
    }
  }
}